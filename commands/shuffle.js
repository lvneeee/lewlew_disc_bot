const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getGuildManager } = require('../utils/audioQueue');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('shuffle')
    .setDescription('X√°o tr·ªôn th·ª© t·ª± c√°c b√†i h√°t trong h√†ng ƒë·ª£i'),

  async execute(interaction) {
    const guildManager = getGuildManager(interaction.guildId);
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong voice channel kh√¥ng
    if (!interaction.member.voice.channel) {
      logger.warn(`[SHUFFLE] User ${interaction.user.tag} tried to shuffle without joining a voice channel.`);
      return interaction.reply('‚ùó B·∫°n ph·∫£i v√†o voice channel tr∆∞·ªõc.');
    }

    // X√°o tr·ªôn h√†ng ƒë·ª£i v√† ki·ªÉm tra k·∫øt qu·∫£
    const shuffleSuccess = guildManager.shuffle();
    if (!shuffleSuccess) {
      logger.info(`[SHUFFLE] Not enough tracks to shuffle for user ${interaction.user.tag}`);
      return interaction.reply('‚ùó C·∫ßn √≠t nh·∫•t 2 b√†i h√°t trong h√†ng ƒë·ª£i ƒë·ªÉ x√°o tr·ªôn.');
    }

    // L·∫•y danh s√°ch h√†ng ƒë·ª£i m·ªõi ƒë·ªÉ hi·ªÉn th·ªã
    const queue = guildManager.getQueue();
    const currentTrack = guildManager.getCurrentTrack();
    
    // T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã h√†ng ƒë·ª£i m·ªõi
    const embed = new EmbedBuilder()
      .setTitle('üîÄ ƒê√£ x√°o tr·ªôn h√†ng ƒë·ª£i')
      .setColor('#0099ff');

    let description = '';
    const MAX_QUEUE_DISPLAY = 10; // Gi·ªõi h·∫°n s·ªë b√†i hi·ªÉn th·ªã

    if (currentTrack) {
      description += `**ƒêang ph√°t:** ${currentTrack.title}\n\n`;
    }

    if (queue.length > 0) {
      description += '**H√†ng ƒë·ª£i m·ªõi:**\n';
      const displayQueue = queue.slice(0, MAX_QUEUE_DISPLAY);
      description += displayQueue
        .map((track, index) => `${index + 1}. ${track.title}`)
        .join('\n');

      if (queue.length > MAX_QUEUE_DISPLAY) {
        description += `\n...v√† ${queue.length - MAX_QUEUE_DISPLAY} b√†i kh√°c.`;
      }
    }

    embed.setDescription(description);
    logger.info(`[SHUFFLE] Queue shuffled by ${interaction.user.tag}, new queue size: ${queue.length}`);
    await interaction.reply({ embeds: [embed] });
  },
};
